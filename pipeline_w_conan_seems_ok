

// demoing a second agent - add a node label if you spin up a second agent to ensure this runs on another agent.
node('agent1') {

    // on windows use: bat 'ls'
    sh 'ls'

    // on windows use: bat 'del /S /Q *'
    sh 'rm -rf *'

    //unstash 'everything'

    // on windows use: bat 'dir'
    sh 'ls'
}


node('ubuntu-build') {
    
    stage('Checkout') {
        git 'https://github.com/yackey/AEF-CI.git'
    }
    
    def project_path = "build"

    dir(project_path) {
       
        stage ('Release Simulator build')
        {
            runCI("Release", "x86_64")
            runx86_64_Additional_CI("Release", "x86_64")
        } 

        stage ('Debug Simulator build')
        {
            runCI("Debug", "x86_64")
            runx86_64_Additional_CI("Debug", "x86_64")
        } 

        stage ('Release ARM build')
        {
            runCI("Release", "ARM")
        } 

        stage ('Debug ARM build')
        {
            runCI("Debug", "ARM")
        } 

    }
}

def runCI(buildtype, processor) {
    sh 'rm -rf *'
    //unstash 'everything'
    stage('Conan Install') {
        if ("${buildtype}" == "Release") 
        {
            if("${processor}" == "x86_64")
            {
                sh 'conan install ../test -s os=Linux -s arch=x86_64 -s compiler=gcc -s compiler.version=6.4 -s build_type=Release'
            }
            else
            {
                sh 'conan install ../test -s os=Linux -s arch=armv7 -s compiler=gcc -s compiler.version=6.4 -s build_type=Release'            
            }
        }
        else
        {
            if("${processor}" == "x86_64")
            {
                sh 'conan install ../test -s os=Linux -s arch=x86_64 -s compiler=gcc -s compiler.version=6.4 -s build_type=Debug'
            }
            else
            {
                sh 'conan install ../test -s os=Linux -s arch=armv7 -s compiler=gcc -s compiler.version=6.4 -s build_type=Debug'            
            }
        }
    }
        
    stage('Build') {
        echo "${buildtype}"
        if ("${buildtype}" == "Release") 
        {
            if("${processor}" == "x86_64")
            {
                sh 'cmake -G "Unix Makefiles" -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_TOOLCHAIN_FILE=../Toolchain-GCC-x86_64.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TARGET_PROCESSOR=x86_64 ..' 
            }
            else
            {
                sh 'cmake -G "Unix Makefiles" -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_TOOLCHAIN_FILE=../Toolchain-GCC-ARM.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TARGET_PROCESSOR=ARM ..' 
            }
        }
        else // Debug
        {
            if("${processor}" == "x86_64")
            {
                sh 'cmake -G "Unix Makefiles" -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_TOOLCHAIN_FILE=../Toolchain-GCC-x86_64.cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TARGET_PROCESSOR=x86_64 ..' 
            }
            else
            {
                sh 'cmake -G "Unix Makefiles" -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_TOOLCHAIN_FILE=../Toolchain-GCC-ARM.cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TARGET_PROCESSOR=ARM ..' 
            } 
        }
    
        sh 'cmake --build .'

    }
}

def runx86_64_Additional_CI(buildtype, processor) {
    //sh 'rm -rf *'
    //unstash 'everything'
       
    stage('Test') {
        if("${processor}" == "x86_64")
        {
            if ("${buildtype}" == "Release") 
            {
                sh 'ls'
                sh './x86_64/bin/Release/AefTest --gtest_output=xml:AefTestResultsRelease.xml'
                sh 'ls'   
                step([$class: 'JUnitResultArchiver', allowEmptyResults: true, testResults: 'AefTestResultsRelease.xml'])
            }
            else
            {
                sh 'ls'
                sh './x86_64/bin/Debug/AefTest --gtest_output=xml:AefTestResultsDebug.xml'
                sh 'ls'   
                step([$class: 'JUnitResultArchiver', allowEmptyResults: true, testResults: 'AefTestResultsDebug.xml'])
            }
        }
    }

    stage('Coverage Generation') {
        if("${processor}" == "x86_64")
        {
            if ("${buildtype}" == "Release") 
            {
                //sh '/usr/bin/lcov --directory . --capture --output-file ./code_coverage.info -rc lcov_branch_coverage=1' 
                //sh '/usr/bin/genhtml code_coverage.info --branch-coverage --output-directory ./code_coverage_report_Release'
            }
            else
            {
                sh '/usr/bin/lcov --directory . --capture --output-file ./code_coverage.info -rc lcov_branch_coverage=1' 
                sh '/usr/bin/genhtml code_coverage.info --branch-coverage --output-directory ./code_coverage_report_Debug'
                
            }
        }
    }
    
    stage('Publish Report') {
        if("${processor}" == "x86_64")
        {
            if ("${buildtype}" == "Release") 
            {
                //publishHTML([allowMissing: false, 
                //alwaysLinkToLastBuild: false, 
                //keepAll: true, 
                //reportDir: 'code_coverage_report_Release', 
                //reportFiles: 'index.html', 
                //reportName: 'Code Coverage Release', 
                //reportTitles: ''])                    
            }
            else
            {
                publishHTML([allowMissing: false, 
                alwaysLinkToLastBuild: false, 
                keepAll: true, 
                reportDir: 'code_coverage_report_Debug', 
                reportFiles: 'index.html', 
                reportName: 'Code Coverage Debug', 
                reportTitles: ''])                     
            }
        }
    }
}
